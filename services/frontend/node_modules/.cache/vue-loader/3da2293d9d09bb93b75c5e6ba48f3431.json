{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/Dashboard/Dash.vue?vue&type=template&id=736a3406","dependencies":[{"path":"/app/src/components/Dashboard/Dash.vue","mtime":1712083758794},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1712078350439},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1712078350439},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1712078353207},{"path":"/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1712078354959},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1712078350439},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1712078353439}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}